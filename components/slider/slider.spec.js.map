{"version":3,"file":"slider.spec.js","sourceRoot":"","sources":["../../Users/arturkania/Documents/azimo/playground/material2/tmp/broccoli_type_script_compiler-input_base_path-VicCFYVt.tmp/0/src/demo-app/components/slider/slider.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    addProviders,\n    inject,\n    async,\n} from '@angular/core/testing';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {Component, DebugElement, ViewEncapsulation} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MdSlider, MD_SLIDER_DIRECTIVES} from './slider';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {TestGestureConfig} from './test-gesture-config';\n\ndescribe('MdSlider', () => {\n  let builder: TestComponentBuilder;\n  let gestureConfig: TestGestureConfig;\n\n  beforeEach(() => {\n    addProviders([\n      {provide: HAMMER_GESTURE_CONFIG, useFactory: () => {\n        gestureConfig = new TestGestureConfig();\n        return gestureConfig;\n      }}\n    ]);\n  });\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  describe('standard slider', () => {\n    let fixture: ComponentFixture<StandardSlider>;\n    let sliderDebugElement: DebugElement;\n    let sliderNativeElement: HTMLElement;\n    let sliderInstance: MdSlider;\n    let trackFillElement: HTMLElement;\n    let trackFillDimensions: ClientRect;\n    let sliderTrackElement: HTMLElement;\n    let sliderDimensions: ClientRect;\n    let thumbElement: HTMLElement;\n    let thumbDimensions: ClientRect;\n    let thumbWidth: number;\n\n    beforeEach(async(() => {\n      builder.createAsync(StandardSlider).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        sliderDebugElement = fixture.debugElement.query(By.directive(MdSlider));\n        sliderNativeElement = sliderDebugElement.nativeElement;\n        sliderInstance = sliderDebugElement.componentInstance;\n\n        trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track-fill');\n        trackFillDimensions = trackFillElement.getBoundingClientRect();\n        sliderTrackElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track');\n        sliderDimensions = sliderTrackElement.getBoundingClientRect();\n\n        thumbElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-thumb-position');\n        thumbDimensions = thumbElement.getBoundingClientRect();\n        thumbWidth =\n            sliderNativeElement.querySelector('.md-slider-thumb').getBoundingClientRect().width;\n      });\n    }));\n\n    it('should set the default values', () => {\n      expect(sliderInstance.value).toBe(0);\n      expect(sliderInstance.min).toBe(0);\n      expect(sliderInstance.max).toBe(100);\n    });\n\n    it('should update the value on a click', () => {\n      expect(sliderInstance.value).toBe(0);\n      dispatchClickEvent(sliderTrackElement, 0.19);\n      // The expected value is 19 from: percentage * difference of max and min.\n      let difference = Math.abs(sliderInstance.value - 19);\n      expect(difference).toBeLessThan(1);\n    });\n\n    it('should update the value on a drag', () => {\n      expect(sliderInstance.value).toBe(0);\n      dispatchDragEvent(sliderTrackElement, sliderNativeElement, 0, 0.89, gestureConfig);\n      // The expected value is 89 from: percentage * difference of max and min.\n      let difference = Math.abs(sliderInstance.value - 89);\n      expect(difference).toBeLessThan(1);\n    });\n\n    it('should set the value as min when dragging before the track', () => {\n      expect(sliderInstance.value).toBe(0);\n      dispatchDragEvent(sliderTrackElement, sliderNativeElement, 0, -1.33, gestureConfig);\n      expect(sliderInstance.value).toBe(0);\n    });\n\n    it('should set the value as max when dragging past the track', () => {\n      expect(sliderInstance.value).toBe(0);\n      dispatchDragEvent(sliderTrackElement, sliderNativeElement, 0, 1.75, gestureConfig);\n      expect(sliderInstance.value).toBe(100);\n    });\n\n    it('should update the track fill on click', () => {\n      expect(trackFillDimensions.width).toBe(0);\n      dispatchClickEvent(sliderTrackElement, 0.39);\n\n      trackFillDimensions = trackFillElement.getBoundingClientRect();\n      // The fill should be close to the slider's width * the percentage from the click.\n      let difference = Math.abs(trackFillDimensions.width - (sliderDimensions.width * 0.39));\n      expect(difference).toBeLessThan(1);\n    });\n\n    it('should update the thumb position on click', () => {\n      expect(thumbDimensions.left).toBe(sliderDimensions.left - (thumbWidth / 2));\n      dispatchClickEvent(sliderTrackElement, 0.16);\n\n      thumbDimensions = thumbElement.getBoundingClientRect();\n      // The thumb's offset is expected to be equal to the slider's offset + 0.16 * the slider's\n      // width - half the thumb width (to center the thumb).\n      let offset = sliderDimensions.left + (sliderDimensions.width * 0.16) - (thumbWidth / 2);\n      let difference = Math.abs(thumbDimensions.left - offset);\n      expect(difference).toBeLessThan(1);\n    });\n\n    it('should update the track fill on drag', () => {\n      expect(trackFillDimensions.width).toBe(0);\n      dispatchDragEvent(sliderTrackElement, sliderNativeElement, 0, 0.86, gestureConfig);\n\n      trackFillDimensions = trackFillElement.getBoundingClientRect();\n      let difference = Math.abs(trackFillDimensions.width - (sliderDimensions.width * 0.86));\n      expect(difference).toBeLessThan(1);\n    });\n\n    it('should update the thumb position on drag', () => {\n      expect(thumbDimensions.left).toBe(sliderDimensions.left - (thumbWidth / 2));\n      dispatchDragEvent(sliderTrackElement, sliderNativeElement, 0, 0.27, gestureConfig);\n\n      thumbDimensions = thumbElement.getBoundingClientRect();\n      let offset = sliderDimensions.left + (sliderDimensions.width * 0.27) - (thumbWidth / 2);\n      let difference = Math.abs(thumbDimensions.left - offset);\n      expect(difference).toBeLessThan(1);\n    });\n\n    it('should add the md-slider-active class on click', () => {\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\n      expect(containerElement.classList).not.toContain('md-slider-active');\n\n      dispatchClickEvent(sliderNativeElement, 0.23);\n      fixture.detectChanges();\n\n      expect(containerElement.classList).toContain('md-slider-active');\n    });\n\n    it('should remove the md-slider-active class on blur', () => {\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\n\n      dispatchClickEvent(sliderNativeElement, 0.95);\n      fixture.detectChanges();\n\n      expect(containerElement.classList).toContain('md-slider-active');\n\n      // Call the `onBlur` handler directly because we cannot simulate a focus event in unit tests.\n      sliderInstance.onBlur();\n      fixture.detectChanges();\n\n      expect(containerElement.classList).not.toContain('md-slider-active');\n    });\n\n    it('should add and remove the md-slider-dragging class when dragging', () => {\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\n      expect(containerElement.classList).not.toContain('md-slider-dragging');\n\n      dispatchDragStartEvent(sliderNativeElement, 0, gestureConfig);\n      fixture.detectChanges();\n\n      expect(containerElement.classList).toContain('md-slider-dragging');\n\n      dispatchDragEndEvent(sliderNativeElement, 0.34, gestureConfig);\n      fixture.detectChanges();\n\n      expect(containerElement.classList).not.toContain('md-slider-dragging');\n    });\n  });\n\n  describe('disabled slider', () => {\n    let fixture: ComponentFixture<StandardSlider>;\n    let sliderDebugElement: DebugElement;\n    let sliderNativeElement: HTMLElement;\n    let sliderInstance: MdSlider;\n\n    beforeEach(async(() => {\n      builder.createAsync(DisabledSlider).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        sliderDebugElement = fixture.debugElement.query(By.directive(MdSlider));\n        sliderNativeElement = sliderDebugElement.nativeElement;\n        sliderInstance = sliderDebugElement.componentInstance;\n      });\n    }));\n\n    it('should be disabled', () => {\n      expect(sliderInstance.disabled).toBeTruthy();\n    });\n\n    it('should not change the value on click when disabled', () => {\n      expect(sliderInstance.value).toBe(0);\n      dispatchClickEvent(sliderNativeElement, 0.63);\n      expect(sliderInstance.value).toBe(0);\n    });\n\n    it('should not change the value on drag when disabled', () => {\n      expect(sliderInstance.value).toBe(0);\n      dispatchDragEvent(sliderNativeElement, sliderNativeElement, 0, 0.5, gestureConfig);\n      expect(sliderInstance.value).toBe(0);\n    });\n\n    it('should not add the md-slider-active class on click when disabled', () => {\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\n      expect(containerElement.classList).not.toContain('md-slider-active');\n\n      dispatchClickEvent(sliderNativeElement, 0.43);\n      fixture.detectChanges();\n\n      expect(containerElement.classList).not.toContain('md-slider-active');\n    });\n\n    it('should not add the md-slider-dragging class on drag when disabled', () => {\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\n      expect(containerElement.classList).not.toContain('md-slider-dragging');\n\n      dispatchDragStartEvent(sliderNativeElement, 0.46, gestureConfig);\n      fixture.detectChanges();\n\n      expect(containerElement.classList).not.toContain('md-slider-dragging');\n    });\n  });\n\n  describe('slider with set min and max', () => {\n    let fixture: ComponentFixture<SliderWithMinAndMax>;\n    let sliderDebugElement: DebugElement;\n    let sliderNativeElement: HTMLElement;\n    let sliderInstance: MdSlider;\n    let sliderTrackElement: HTMLElement;\n\n    beforeEach(async(() => {\n      builder.createAsync(SliderWithMinAndMax).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        sliderDebugElement = fixture.debugElement.query(By.directive(MdSlider));\n        sliderNativeElement = sliderDebugElement.nativeElement;\n        sliderInstance = sliderDebugElement.injector.get(MdSlider);\n        sliderTrackElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track');\n      });\n    }));\n\n    it('should set the default values from the attributes', () => {\n      expect(sliderInstance.value).toBe(5);\n      expect(sliderInstance.min).toBe(5);\n      expect(sliderInstance.max).toBe(15);\n    });\n\n    it('should set the correct value on click', () => {\n      dispatchClickEvent(sliderTrackElement, 0.09);\n      // Computed by multiplying the difference between the min and the max by the percentage from\n      // the click and adding that to the minimum.\n      let value = 5 + (0.09 * (15 - 5));\n      let difference = Math.abs(sliderInstance.value - value);\n      expect(difference).toBeLessThan(1);\n    });\n\n    it('should set the correct value on drag', () => {\n      dispatchDragEvent(sliderTrackElement, sliderNativeElement, 0, 0.62, gestureConfig);\n      // Computed by multiplying the difference between the min and the max by the percentage from\n      // the click and adding that to the minimum.\n      let value = 5 + (0.62 * (15 - 5));\n      let difference = Math.abs(sliderInstance.value - value);\n      expect(difference).toBeLessThan(1);\n    });\n  });\n\n  describe('slider with set value', () => {\n    let fixture: ComponentFixture<SliderWithValue>;\n    let sliderDebugElement: DebugElement;\n    let sliderNativeElement: HTMLElement;\n    let sliderInstance: MdSlider;\n    let sliderTrackElement: HTMLElement;\n\n    beforeEach(async(() => {\n      builder.createAsync(SliderWithValue).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        sliderDebugElement = fixture.debugElement.query(By.directive(MdSlider));\n        sliderNativeElement = sliderDebugElement.nativeElement;\n        sliderInstance = sliderDebugElement.injector.get(MdSlider);\n        sliderTrackElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track');\n      });\n    }));\n\n    it('should set the default value from the attribute', () => {\n      expect(sliderInstance.value).toBe(26);\n    });\n\n    it('should set the correct value on click', () => {\n      dispatchClickEvent(sliderTrackElement, 0.92);\n      // On a slider with default max and min the value should be approximately equal to the\n      // percentage clicked. This should be the case regardless of what the original set value was.\n      let value = 92;\n      let difference = Math.abs(sliderInstance.value - value);\n      expect(difference).toBeLessThan(1);\n    });\n\n    it('should set the correct value on drag', () => {\n      dispatchDragEvent(sliderTrackElement, sliderNativeElement, 0, 0.32, gestureConfig);\n      expect(sliderInstance.value).toBe(32);\n    });\n  });\n});\n\n// The transition has to be removed in order to test the updated positions without setTimeout.\n@Component({\n  directives: [MD_SLIDER_DIRECTIVES],\n  template: `<md-slider></md-slider>`,\n  styles: [`\n    .md-slider-track-fill, .md-slider-thumb-position {\n        transition: none !important;\n    }\n  `],\n  encapsulation: ViewEncapsulation.None\n})\nclass StandardSlider { }\n\n@Component({\n  directives: [MD_SLIDER_DIRECTIVES],\n  template: `<md-slider disabled></md-slider>`\n})\nclass DisabledSlider { }\n\n@Component({\n  directives: [MD_SLIDER_DIRECTIVES],\n  template: `<md-slider min=\"5\" max=\"15\"></md-slider>`\n})\nclass SliderWithMinAndMax { }\n\n@Component({\n  directives: [MD_SLIDER_DIRECTIVES],\n  template: `<md-slider value=\"26\"></md-slider>`\n})\nclass SliderWithValue { }\n\n/**\n * Dispatches a click event from an element.\n * @param element The element from which the event will be dispatched.\n * @param percentage The percentage of the slider where the click should occur. Used to find the\n * physical location of the click.\n */\nfunction dispatchClickEvent(element: HTMLElement, percentage: number): void {\n  let dimensions = element.getBoundingClientRect();\n  let y = dimensions.top;\n  let x = dimensions.left + (dimensions.width * percentage);\n\n  let event = document.createEvent('MouseEvent');\n  event.initMouseEvent(\n      'click', true, true, window, 0, x, y, x, y, false, false, false, false, 0, null);\n  element.dispatchEvent(event);\n}\n\n/**\n * Dispatches a drag event from an element.\n * @param trackElement The track element from which the event location will be calculated.\n * @param containerElement The container element from which the event will be dispatched.\n * @param startPercent The percentage of the slider where the drag will begin.\n * @param endPercent The percentage of the slider where the drag will end.\n * @param gestureConfig The gesture config for the test to handle emitting the drag events.\n */\nfunction dispatchDragEvent(trackElement: HTMLElement, containerElement: HTMLElement,\n                           startPercent: number, endPercent: number,\n                           gestureConfig: TestGestureConfig): void {\n  let dimensions = trackElement.getBoundingClientRect();\n  let startX = dimensions.left + (dimensions.width * startPercent);\n  let endX = dimensions.left + (dimensions.width * endPercent);\n\n  gestureConfig.emitEventForElement('dragstart', containerElement, {\n    // The actual event has a center with an x value that the drag listener is looking for.\n    center: { x: startX },\n    // The event needs a source event with a prevent default so we fake one.\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\n  });\n\n  gestureConfig.emitEventForElement('drag', containerElement, {\n    center: { x: endX },\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\n  });\n}\n\n/**\n * Dispatches a dragstart event from an element.\n * @param element The element from which the event will be dispatched.\n * @param startPercent The percentage of the slider where the drag will begin.\n * @param gestureConfig The gesture config for the test to handle emitting the drag events.\n */\nfunction dispatchDragStartEvent(element: HTMLElement, startPercent: number,\n                                gestureConfig: TestGestureConfig): void {\n  let dimensions = element.getBoundingClientRect();\n  let x = dimensions.left + (dimensions.width * startPercent);\n\n  gestureConfig.emitEventForElement('dragstart', element, {\n    center: { x: x },\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\n  });\n}\n\n/**\n * Dispatches a dragend event from an element.\n * @param element The element from which the event will be dispatched.\n * @param endPercent The percentage of the slider where the drag will end.\n * @param gestureConfig The gesture config for the test to handle emitting the drag events.\n */\nfunction dispatchDragEndEvent(element: HTMLElement, endPercent: number,\n                                gestureConfig: TestGestureConfig): void {\n  let dimensions = element.getBoundingClientRect();\n  let x = dimensions.left + (dimensions.width * endPercent);\n\n  gestureConfig.emitEventForElement('dragend', element, {\n    center: { x: x },\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\n  });\n}\n"]}