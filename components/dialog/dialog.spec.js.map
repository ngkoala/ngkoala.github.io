{"version":3,"file":"dialog.spec.js","sourceRoot":"","sources":["../../Users/arturkania/Documents/azimo/playground/material2/tmp/broccoli_type_script_compiler-input_base_path-VicCFYVt.tmp/0/src/demo-app/components/dialog/dialog.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  inject,\n  fakeAsync,\n  async,\n  addProviders,\n} from '@angular/core/testing';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {\n  Component,\n  Directive,\n  ViewChild,\n  ViewContainerRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdDialog} from './dialog';\nimport {OVERLAY_PROVIDERS, OVERLAY_CONTAINER_TOKEN} from '@angular2-material/core/overlay/overlay';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\n\n\n\ndescribe('MdDialog', () => {\n  let builder: TestComponentBuilder;\n  let dialog: MdDialog;\n  let overlayContainerElement: HTMLElement;\n\n  let testViewContainerRef: ViewContainerRef;\n  let viewContainerFixture: ComponentFixture<ComponentWithChildViewContainer>;\n\n  beforeEach(() => {\n    addProviders([\n      OVERLAY_PROVIDERS,\n      MdDialog,\n      {provide: OVERLAY_CONTAINER_TOKEN, useFactory: () => {\n        overlayContainerElement = document.createElement('div');\n        return overlayContainerElement;\n      }}\n    ]);\n  });\n\n  let deps = [TestComponentBuilder, MdDialog];\n  beforeEach(inject(deps, fakeAsync((tcb: TestComponentBuilder, d: MdDialog) => {\n    builder = tcb;\n    dialog = d;\n  })));\n\n  beforeEach(async(() => {\n    builder.createAsync(ComponentWithChildViewContainer).then(fixture => {\n      viewContainerFixture = fixture;\n\n      viewContainerFixture.detectChanges();\n      testViewContainerRef = fixture.componentInstance.childViewContainer;\n    });\n  }));\n\n  it('should open a dialog with a component', async(() => {\n    let config = new MdDialogConfig();\n    config.viewContainerRef = testViewContainerRef;\n\n    dialog.open(PizzaMsg, config).then(dialogRef => {\n      expect(overlayContainerElement.textContent).toContain('Pizza');\n      expect(dialogRef.componentInstance).toEqual(jasmine.any(PizzaMsg));\n      expect(dialogRef.componentInstance.dialogRef).toBe(dialogRef);\n\n      viewContainerFixture.detectChanges();\n      let dialogContainerElement = overlayContainerElement.querySelector('md-dialog-container');\n      expect(dialogContainerElement.getAttribute('role')).toBe('dialog');\n    });\n\n    detectChangesForDialogOpen(viewContainerFixture);\n  }));\n\n  it('should apply the configured role to the dialog element', async(() => {\n    let config = new MdDialogConfig();\n    config.viewContainerRef = testViewContainerRef;\n    config.role = 'alertdialog';\n\n    dialog.open(PizzaMsg, config).then(dialogRef => {\n      viewContainerFixture.detectChanges();\n\n      let dialogContainerElement = overlayContainerElement.querySelector('md-dialog-container');\n      expect(dialogContainerElement.getAttribute('role')).toBe('alertdialog');\n    });\n\n    detectChangesForDialogOpen(viewContainerFixture);\n  }));\n\n  it('should close a dialog and get back a result', async(() => {\n    let config = new MdDialogConfig();\n    config.viewContainerRef = testViewContainerRef;\n\n    dialog.open(PizzaMsg, config).then(dialogRef => {\n      viewContainerFixture.detectChanges();\n\n      let afterCloseResult: string;\n      dialogRef.afterClosed().subscribe(result => {\n        afterCloseResult = result;\n      });\n\n      dialogRef.close('Charmander');\n\n      viewContainerFixture.whenStable().then(() => {\n        expect(afterCloseResult).toBe('Charmander');\n        expect(overlayContainerElement.childNodes.length).toBe(0);\n      });\n    });\n\n    detectChangesForDialogOpen(viewContainerFixture);\n  }));\n});\n\n\n/** Runs the necessary detectChanges for a dialog to complete its opening. */\nfunction detectChangesForDialogOpen(fixture: ComponentFixture<ComponentWithChildViewContainer>) {\n  // TODO(jelbourn): figure out why the test zone is \"stable\" when there are still pending\n  // tasks, such that we have to use `setTimeout` to run the second round of change detection.\n  // Two rounds of change detection are necessary: one to *create* the dialog container, and\n  // another to cause the lifecycle events of the container to run and load the dialog content.\n  fixture.detectChanges();\n  setTimeout(() => fixture.detectChanges(), 50);\n}\n\n@Directive({selector: 'dir-with-view-container'})\nclass DirectiveWithViewContainer {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\n@Component({\n  selector: 'arbitrary-component',\n  template: `<dir-with-view-container></dir-with-view-container>`,\n  directives: [DirectiveWithViewContainer],\n})\nclass ComponentWithChildViewContainer {\n  @ViewChild(DirectiveWithViewContainer) childWithViewContainer: DirectiveWithViewContainer;\n\n  constructor(public changeDetectorRef: ChangeDetectorRef) { }\n\n  get childViewContainer() {\n    return this.childWithViewContainer.viewContainerRef;\n  }\n}\n\n/** Simple component for testing ComponentPortal. */\n@Component({\n  selector: 'pizza-msg',\n  template: '<p>Pizza</p>',\n})\nclass PizzaMsg {\n  constructor(public dialogRef: MdDialogRef<PizzaMsg>) { }\n}\n"]}