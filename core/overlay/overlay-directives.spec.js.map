{"version":3,"file":"overlay-directives.spec.js","sourceRoot":"","sources":["../../Users/arturkania/Documents/azimo/playground/material2/tmp/broccoli_type_script_compiler-input_base_path-1v2UHKuC.tmp/0/src/demo-app/core/overlay/overlay-directives.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wBAMO,uBAAuB,CAAC,CAAA;AAC/B,wBAAqD,2BAA2B,CAAC,CAAA;AACjF,qBAAmC,eAAe,CAAC,CAAA;AACnD,mCAAuD,sBAAsB,CAAC,CAAA;AAC9E,wBAA+C,WAAW,CAAC,CAAA;AAC3D,+BAA4B,2BAA2B,CAAC,CAAA;AACxD,yCAAqC,qCAAqC,CAAC,CAAA;AAC3E,4CAAwC,wCAAwC,CAAC,CAAA;AAGjF,QAAQ,CAAC,oBAAoB,EAAE;IAC7B,IAAI,OAA6B,CAAC;IAClC,IAAI,uBAAoC,CAAC;IACzC,IAAI,OAAwD,CAAC;IAE7D,UAAU,CAAC;QACT,sBAAY,CAAC;YACX,iBAAO;YACP,iDAAsB;YACtB,8BAAa;YACb,EAAC,OAAO,EAAE,iCAAuB,EAAE,UAAU,EAAE;oBAC7C,uBAAuB,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACxD,MAAM,CAAC,uBAAuB,CAAC;gBACjC,CAAC,EAAC;SACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAC,GAAyB;QAClE,OAAO,GAAG,GAAG,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC,eAAK,CAAC;QACf,OAAO,CAAC,WAAW,CAAC,6BAA6B,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;YACvD,OAAO,GAAG,CAAC,CAAC;YACZ,OAAO,CAAC,aAAa,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,8DAA8D,EAAE;QACjE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,mBAAS,CAAC;QACzE,OAAO,CAAC,OAAO,EAAE,CAAC;QAClB,yBAAe,EAAE,CAAC;QAElB,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,0EAA0E,EAAE;QAC7E,IAAI,aAAa,GACb,OAAO,CAAC,YAAY,CAAC,iBAAiB,CAAC;QAC3C,IAAI,gBAAgB,GAAG,aAAa,CAAC,yBAAyB,CAAC;QAE/D,IAAI,QAAQ,GACoB,gBAAgB,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAAC;QACxF,MAAM,CAAC,QAAQ,CAAC,CAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,uDAAyB,CAAC,CAAC,CAAC;QAElE,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACnC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAWH;IAAA;IAEA,CAAC;IADC;QAAC,gBAAS,CAAC,8CAAyB,CAAC;;oFAAA;IATvC;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,yKAIE;YACZ,UAAU,EAAE,CAAC,8CAAyB,EAAE,kCAAa,CAAC;SACvD,CAAC;;qCAAA;IAGF,oCAAC;AAAD,CAAC,AAFD,IAEC","sourcesContent":["import {\n    inject,\n    async,\n    fakeAsync,\n    flushMicrotasks,\n    addProviders,\n} from '@angular/core/testing';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {Component, ViewChild} from '@angular/core';\nimport {ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\nimport {OVERLAY_CONTAINER_TOKEN, Overlay} from './overlay';\nimport {ViewportRuler} from './position/viewport-ruler';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\n\n\ndescribe('Overlay directives', () => {\n  let builder: TestComponentBuilder;\n  let overlayContainerElement: HTMLElement;\n  let fixture: ComponentFixture<ConnectedOverlayDirectiveTest>;\n\n  beforeEach(() => {\n    addProviders([\n      Overlay,\n      OverlayPositionBuilder,\n      ViewportRuler,\n      {provide: OVERLAY_CONTAINER_TOKEN, useFactory: () => {\n        overlayContainerElement = document.createElement('div');\n        return overlayContainerElement;\n      }},\n    ]);\n  });\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  beforeEach(async(() => {\n    builder.createAsync(ConnectedOverlayDirectiveTest).then(f => {\n      fixture = f;\n      fixture.detectChanges();\n    });\n  }));\n\n  it(`should create an overlay and attach the directive's template`, () => {\n    expect(overlayContainerElement.textContent).toContain('Menu content');\n  });\n\n  it('should destroy the overlay when the directive is destroyed', fakeAsync(() => {\n    fixture.destroy();\n    flushMicrotasks();\n\n    expect(overlayContainerElement.textContent.trim()).toBe('');\n  }));\n\n  it('should use a connected position strategy with a default set of positions', () => {\n    let testComponent: ConnectedOverlayDirectiveTest =\n        fixture.debugElement.componentInstance;\n    let overlayDirective = testComponent.connectedOverlayDirective;\n\n    let strategy =\n        <ConnectedPositionStrategy> overlayDirective.overlayRef.getState().positionStrategy;\n    expect(strategy) .toEqual(jasmine.any(ConnectedPositionStrategy));\n\n    let positions = strategy.positions;\n    expect(positions.length).toBeGreaterThan(0);\n  });\n});\n\n\n@Component({\n  template: `\n  <button overlay-origin #trigger=\"overlayOrigin\">Toggle menu</button>\n  <template connected-overlay [origin]=\"trigger\">\n    <p>Menu content</p>\n  </template>`,\n  directives: [ConnectedOverlayDirective, OverlayOrigin],\n})\nclass ConnectedOverlayDirectiveTest {\n  @ViewChild(ConnectedOverlayDirective) connectedOverlayDirective: ConnectedOverlayDirective;\n}\n"]}