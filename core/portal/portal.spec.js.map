{"version":3,"file":"portal.spec.js","sourceRoot":"","sources":["../../Users/arturkania/Documents/azimo/playground/material2/tmp/broccoli_type_script_compiler-input_base_path-VicCFYVt.tmp/0/src/demo-app/core/portal/portal.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  inject,\n  fakeAsync,\n  flushMicrotasks\n} from '@angular/core/testing';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {\n  Component,\n  ViewChildren,\n  QueryList,\n  ViewContainerRef,\n  ComponentResolver,\n  Optional,\n  Injector,\n} from '@angular/core';\nimport {TemplatePortalDirective, PortalHostDirective} from './portal-directives';\nimport {Portal, ComponentPortal} from './portal';\nimport {DomPortalHost} from './dom-portal-host';\n\n\ndescribe('Portals', () => {\n  let builder: TestComponentBuilder;\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  describe('PortalHostDirective', () => {\n    it('should load a component into the portal', fakeAsync(() => {\n      let appFixture: ComponentFixture<PortalTestApp>;\n\n      builder.createAsync(PortalTestApp).then(fixture => {\n        appFixture = fixture;\n      });\n\n      // Flush the async creation of the PortalTestApp.\n      flushMicrotasks();\n\n      // Set the selectedHost to be a ComponentPortal.\n      let testAppComponent = appFixture.debugElement.componentInstance;\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\n      appFixture.detectChanges();\n\n      // Flush the attachment of the Portal.\n      flushMicrotasks();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Pizza');\n    }));\n\n    it('should load a component into the portal with a given injector', fakeAsync(() => {\n      let appFixture: ComponentFixture<PortalTestApp>;\n\n      builder.createAsync(PortalTestApp).then(fixture => {\n        appFixture = fixture;\n      });\n\n      // Flush the async creation of the PortalTestApp.\n      flushMicrotasks();\n\n      // Create a custom injector for the component.\n      let chocolateInjector = new ChocolateInjector(appFixture.componentInstance.injector);\n\n      // Set the selectedHost to be a ComponentPortal.\n      let testAppComponent = appFixture.debugElement.componentInstance;\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg, null, chocolateInjector);\n      appFixture.detectChanges();\n\n      // Flush the attachment of the Portal.\n      flushMicrotasks();\n      appFixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Pizza');\n      expect(hostContainer.textContent).toContain('Chocolate');\n    }));\n\n    it('should load a <template> portal', fakeAsync(() => {\n      let appFixture: ComponentFixture<PortalTestApp>;\n\n      builder.createAsync(PortalTestApp).then(fixture => {\n        appFixture = fixture;\n      });\n\n      // Flush the async creation of the PortalTestApp.\n      flushMicrotasks();\n\n      let testAppComponent = appFixture.debugElement.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      appFixture.detectChanges();\n\n      // Set the selectedHost to be a TemplatePortal.\n      testAppComponent.selectedPortal = testAppComponent.cakePortal;\n      appFixture.detectChanges();\n\n      // Flush the attachment of the Portal.\n      flushMicrotasks();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Cake');\n    }));\n\n    it('should load a <template> portal with the `*` sugar', fakeAsync(() => {\n      let appFixture: ComponentFixture<PortalTestApp>;\n\n      builder.createAsync(PortalTestApp).then(fixture => {\n        appFixture = fixture;\n      });\n\n      // Flush the async creation of the PortalTestApp.\n      flushMicrotasks();\n\n      let testAppComponent = appFixture.debugElement.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      appFixture.detectChanges();\n\n      // Set the selectedHost to be a TemplatePortal (with the `*` syntax).\n      testAppComponent.selectedPortal = testAppComponent.piePortal;\n      appFixture.detectChanges();\n\n      // Flush the attachment of the Portal.\n      flushMicrotasks();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Pie');\n    }));\n\n    it('should load a <template> portal with a binding', fakeAsync(() => {\n      let appFixture: ComponentFixture<PortalTestApp>;\n\n      builder.createAsync(PortalTestApp).then(fixture => {\n        appFixture = fixture;\n      });\n\n      // Flush the async creation of the PortalTestApp.\n      flushMicrotasks();\n\n      let testAppComponent = appFixture.debugElement.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      appFixture.detectChanges();\n\n      // Set the selectedHost to be a TemplatePortal.\n      testAppComponent.selectedPortal = testAppComponent.portalWithBinding;\n      appFixture.detectChanges();\n\n      // Flush the attachment of the Portal.\n      flushMicrotasks();\n\n      // Now that the portal is attached, change detection has to happen again in order\n      // for the bindings to update.\n      appFixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Banana');\n\n      // When updating the binding value.\n      testAppComponent.fruit = 'Mango';\n      appFixture.detectChanges();\n\n      // Expect the new value to be reflected in the rendered output.\n      expect(hostContainer.textContent).toContain('Mango');\n    }));\n\n    it('should change the attached portal', fakeAsync(() => {\n      let appFixture: ComponentFixture<PortalTestApp>;\n\n      builder.createAsync(PortalTestApp).then(fixture => {\n        appFixture = fixture;\n      });\n\n      // Flush the async creation of the PortalTestApp.\n      flushMicrotasks();\n\n      let testAppComponent = appFixture.debugElement.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      appFixture.detectChanges();\n\n      // Set the selectedHost to be a ComponentPortal.\n      testAppComponent.selectedPortal = testAppComponent.piePortal;\n      appFixture.detectChanges();\n\n      // Flush the attachment of the Portal.\n      flushMicrotasks();\n      appFixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Pie');\n\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\n      appFixture.detectChanges();\n\n      flushMicrotasks();\n\n      expect(hostContainer.textContent).toContain('Pizza');\n    }));\n  });\n\n  describe('DomPortalHost', function () {\n    let componentLoader: ComponentResolver;\n    let someViewContainerRef: ViewContainerRef;\n    let someInjector: Injector;\n    let someDomElement: HTMLElement;\n    let host: DomPortalHost;\n\n    beforeEach(inject([ComponentResolver], (dcl: ComponentResolver) => {\n      componentLoader = dcl;\n    }));\n\n    beforeEach(() => {\n      someDomElement = document.createElement('div');\n      host = new DomPortalHost(someDomElement, componentLoader);\n    });\n\n    it('should attach and detach a component portal', fakeAsync(() => {\n      builder.createAsync(ArbitraryViewContainerRefComponent).then(fixture => {\n        someViewContainerRef = fixture.componentInstance.viewContainerRef;\n      });\n\n      flushMicrotasks();\n\n      let portal = new ComponentPortal(PizzaMsg, someViewContainerRef);\n\n      let componentInstance: PizzaMsg;\n      portal.attach(host).then(ref => {\n        componentInstance = ref.instance;\n      });\n\n      flushMicrotasks();\n\n      expect(componentInstance).toEqual(jasmine.any(PizzaMsg));\n      expect(someDomElement.textContent).toContain('Pizza');\n\n      host.detach();\n      flushMicrotasks();\n\n      expect(someDomElement.innerHTML).toBe('');\n    }));\n\n    it('should attach and detach a component portal with a given injector', fakeAsync(() => {\n      let appFixture: ComponentFixture<ArbitraryViewContainerRefComponent>;\n      builder.createAsync(ArbitraryViewContainerRefComponent).then(fixture => {\n        appFixture = fixture;\n        someViewContainerRef = fixture.componentInstance.viewContainerRef;\n        someInjector = fixture.componentInstance.injector;\n      });\n\n      flushMicrotasks();\n\n\n      let chocolateInjector = new ChocolateInjector(someInjector);\n      let portal = new ComponentPortal(PizzaMsg, someViewContainerRef, chocolateInjector);\n\n      let componentInstance: PizzaMsg;\n      portal.attach(host).then(ref => {\n        componentInstance = ref.instance;\n      });\n\n      flushMicrotasks();\n      appFixture.detectChanges();\n\n      expect(componentInstance).toEqual(jasmine.any(PizzaMsg));\n      expect(someDomElement.textContent).toContain('Pizza');\n      expect(someDomElement.textContent).toContain('Chocolate');\n\n      host.detach();\n      flushMicrotasks();\n\n      expect(someDomElement.innerHTML).toBe('');\n    }));\n\n    it('should attach and detach a template portal', fakeAsync(() => {\n      let appFixture: ComponentFixture<PortalTestApp>;\n\n      builder.createAsync(PortalTestApp).then(fixture => {\n        appFixture = fixture;\n      });\n\n      // Flush the async creation of the PortalTestApp.\n      flushMicrotasks();\n      appFixture.detectChanges();\n\n      appFixture.componentInstance.cakePortal.attach(host);\n      flushMicrotasks();\n\n      expect(someDomElement.textContent).toContain('Cake');\n    }));\n\n    it('should attach and detach a template portal with a binding', fakeAsync(() => {\n      let appFixture: ComponentFixture<PortalTestApp>;\n      builder.createAsync(PortalTestApp).then(fixture => {\n        appFixture = fixture;\n      });\n\n      // Flush the async creation of the PortalTestApp.\n      flushMicrotasks();\n\n      let testAppComponent = appFixture.debugElement.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      appFixture.detectChanges();\n\n      // Attach the TemplatePortal.\n      testAppComponent.portalWithBinding.attach(host);\n      appFixture.detectChanges();\n\n      // Flush the attachment of the Portal.\n      flushMicrotasks();\n\n      // Now that the portal is attached, change detection has to happen again in order\n      // for the bindings to update.\n      appFixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      expect(someDomElement.textContent).toContain('Banana');\n\n      // When updating the binding value.\n      testAppComponent.fruit = 'Mango';\n      appFixture.detectChanges();\n\n      // Expect the new value to be reflected in the rendered output.\n      expect(someDomElement.textContent).toContain('Mango');\n\n      host.detach();\n      expect(someDomElement.innerHTML).toBe('');\n    }));\n\n    it('should change the attached portal', fakeAsync(() => {\n      builder.createAsync(ArbitraryViewContainerRefComponent).then(fixture => {\n        someViewContainerRef = fixture.componentInstance.viewContainerRef;\n      });\n\n      flushMicrotasks();\n\n      let appFixture: ComponentFixture<PortalTestApp>;\n\n      builder.createAsync(PortalTestApp).then(fixture => {\n        appFixture = fixture;\n      });\n\n      // Flush the async creation of the PortalTestApp.\n      flushMicrotasks();\n      appFixture.detectChanges();\n\n      appFixture.componentInstance.piePortal.attach(host);\n      flushMicrotasks();\n\n      expect(someDomElement.textContent).toContain('Pie');\n\n      host.detach();\n      flushMicrotasks();\n\n      host.attach(new ComponentPortal(PizzaMsg, someViewContainerRef));\n      flushMicrotasks();\n\n      expect(someDomElement.textContent).toContain('Pizza');\n    }));\n  });\n});\n\n\nclass Chocolate {\n  toString() {\n    return 'Chocolate';\n  }\n}\n\nclass ChocolateInjector {\n  constructor(public parentInjector: Injector) { }\n\n  get(token: any) {\n    return token === Chocolate ? new Chocolate() : this.parentInjector.get(token);\n  }\n}\n\n/** Simple component for testing ComponentPortal. */\n@Component({\n  selector: 'pizza-msg',\n  template: '<p>Pizza</p><p>{{snack}}</p>',\n})\nclass PizzaMsg {\n  constructor(@Optional() public snack: Chocolate) { }\n}\n\n/** Simple component to grab an arbitrary ViewContainerRef */\n@Component({\n  selector: 'some-placeholder',\n  template: '<p>Hello</p>'\n})\nclass ArbitraryViewContainerRefComponent {\n  constructor(public viewContainerRef: ViewContainerRef, public injector: Injector) { }\n}\n\n\n/** Test-bed component that contains a portal host and a couple of template portals. */\n@Component({\n  selector: 'portal-test',\n  template: `\n  <div class=\"portal-container\">\n    <template [portalHost]=\"selectedPortal\"></template>\n  </div>\n\n  <template portal>Cake</template>\n\n  <div *portal>Pie</div>\n\n  <template portal> {{fruit}} </template>\n  `,\n  directives: [PortalHostDirective, TemplatePortalDirective],\n})\nclass PortalTestApp {\n  @ViewChildren(TemplatePortalDirective) portals: QueryList<TemplatePortalDirective>;\n  selectedPortal: Portal<any>;\n  fruit: string = 'Banana';\n\n  constructor(public injector: Injector) { }\n\n  get cakePortal() {\n    return this.portals.first;\n  }\n\n  get piePortal() {\n    return this.portals.toArray()[1];\n  }\n\n  get portalWithBinding() {\n    return this.portals.toArray()[2];\n  }\n}\n"]}