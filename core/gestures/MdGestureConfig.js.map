{"version":3,"file":"MdGestureConfig.js","sourceRoot":"","sources":["../../Users/arturkania/Documents/azimo/playground/material2/tmp/broccoli_type_script_compiler-input_base_path-VicCFYVt.tmp/0/src/demo-app/core/gestures/MdGestureConfig.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,iCAAkC,2BAA2B,CAAC,CAAA;AAE9D,2DAA2D;AAE3D;IAAqC,mCAAmB;IAAxD;QAAqC,8BAAmB;QAEtD,gEAAgE;QAChE,WAAM,GAAa;YACjB,MAAM;YACN,WAAW;YACX,SAAS;YACT,WAAW;YACX,UAAU;YACV,WAAW;YACX,OAAO;YACP,YAAY;YACZ,UAAU;YACV,YAAY;YACZ,WAAW;SACZ,CAAC;IA6CJ,CAAC;IA3CC;;;;;;;;;;;SAWK;IACL,qCAAW,GAAX,UAAY,OAAoB;QAC9B,IAAI,EAAE,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;QAE7B,oCAAoC;QACpC,IAAI,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,EAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3F,IAAI,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7F,IAAI,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,EAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC,CAAC;QAEtF,IAAI,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;QAC3B,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QAE/B,4DAA4D;QAC5D,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEzB,4CAA4C;QAC5C,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC;QAEtC,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,sFAAsF;IAC9E,2CAAiB,GAAzB,UAA0B,IAAsB,EAAE,OAAY;QAAE,eAA4B;aAA5B,WAA4B,CAA5B,sBAA4B,CAA5B,IAA4B;YAA5B,8BAA4B;;QAC1F,IAAI,UAAU,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;QAEnC,2DAA2D;QAC3D,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,KAAK,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,UAAU,CAAC,aAAa,CAAC,IAAI,KAAK,EAAE,CAAC,EAArC,CAAqC,CAAC,CAAC;QAE9D,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IA3DH;QAAC,iBAAU,EAAE;;uBAAA;IA6Db,sBAAC;AAAD,CAAC,AA5DD,CAAqC,sCAAmB,GA4DvD;AA5DY,uBAAe,kBA4D3B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class MdGestureConfig extends HammerGestureConfig {\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = [\n    'drag',\n    'dragstart',\n    'dragend',\n    'dragright',\n    'dragleft',\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ];\n\n  /*\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * TODO: Confirm threshold numbers with Material Design UX Team\n   * */\n  buildHammer(element: HTMLElement) {\n    var mc = new Hammer(element);\n\n    // Create custom gesture recognizers\n    let drag = this._createRecognizer(Hammer.Pan, {event: 'drag', threshold: 6}, Hammer.Swipe);\n    let slide = this._createRecognizer(Hammer.Pan, {event: 'slide', threshold: 0}, Hammer.Swipe);\n    let longpress = this._createRecognizer(Hammer.Press, {event: 'longpress', time: 500});\n\n    let pan = new Hammer.Pan();\n    let swipe = new Hammer.Swipe();\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([drag, slide, pan, longpress]);\n\n    return mc;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(type: RecognizerStatic, options: any, ...extra: RecognizerStatic[]) {\n    let recognizer = new type(options);\n\n    // Add the default recognizer to the new custom recognizer.\n    extra.push(type);\n    extra.forEach(entry => recognizer.recognizeWith(new entry()));\n\n    return recognizer;\n  }\n\n}\n"]}